// SPDX-License-Identifier: MIT

pragma solidity ^0.8.20;
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";

contract SecureStash is ERC20, ReentrancyGuard {
    uint256 _totalSupply = totalSupply();
    uint256 public circulatingSupply;
    uint256 public totalMint;
    uint256 public totalBurn;
    uint256 public totalVested;
    uint256 public taxRate = 5;     // 0.5% tax applied only on DEX trades
    address public owner;
    address public deadWallet = 0x000000000000000000000000000000000000dEaD;
    uint256 public constant maxSupply = 100000000 * 10 ** 18; // 100M tokens with 18 decimals
    
    uint256 public seedSaleTokens;
    uint256 public privateSaleTokens;
    uint256 public publicSaleTokens;
    uint256 public volatileControlTokens;
    uint256 public exchangeListingTokens;
    uint256 public ecosystemDevelopmentTokens;
    uint256 public teamTokens;
    uint256 public reserveTokens;

    uint256 public vestedSeedSaleTokens;            
    uint256 public vestedPrivateSaleTokens;         
    uint256 public vestedPublicSaleTokens;             
    uint256 public vestedVolatileControlTokens;
    uint256 public vestedExchangeListingTokens;
    uint256 public vestedEcosystemDevelopmentTokens;
    uint256 public vestedTeamTokens;                
    uint256 public vestedReserveTokens;
    
    uint256 public seedSaleMonthlyRelease;
    uint256 public privateSaleMonthlyRelease;
    uint256 public publicSaleMonthlyRelease;    //Volatile Control Tokens is not released monthly. Not included in next line.
    uint256 public exchangeListingMonthlyRelease;
    uint256 public ecosystemDevelopmentMonthlyRelease;
    uint256 public teamMonthlyRelease;
    uint256 public reserveMonthlyRelease;

    uint256 public initialSeedSaleTokens;
    uint256 public initialPrivateSaleTokens;
    uint256 public initialPublicSaleTokens;
    uint256 public initialExchangeListingTokens;
    uint256 public initialEcosystemDevelopmentTokens;
    uint256 public initialTeamTokens;
    uint256 public initialReserveTokens;

    uint256 public SeedSaleSold;
    uint256 public PrivateSaleSold;
    uint256 public PublicSaleSold;
    uint256 public constant TOKENS_RELEASE = 30 days;

    uint256 public seedSaleRate;
    uint256 public privateSaleRate;
    uint256 public publicSaleRate;

    bool public isSeedSaleActive;
    bool public isPrivateSaleActive;
    bool public isPublicSaleActive;

    mapping(address => uint256) public lastWithdrawal;
    mapping(address => bool) public isDex; // Mapping to keep track of DEX addresses
    mapping(address => uint256) public totalSeedSaleBalances;
    mapping(address => uint256) public totalPrivateSaleBalances;
    mapping(address => uint256) public totalPublicSaleBalances;
    mapping(address => uint256) public volatileControlBalances;         // Balances excluding vested tokens
    mapping(address => uint256) public exchangeListingBalances;         // Balances excluding vested tokens
    mapping(address => uint256) public ecosystemDevelopmentBalances;    // Balances excluding vested tokens
    mapping(address => uint256) public teamBalances;                    // Balances excluding vested tokens
    mapping(address => uint256) public reserveBalances;                 // Balances excluding vested tokens
    mapping(address => uint256) public balances;                        // Balances excluding vested tokens
    
    mapping(address => uint256) public vestedSeedSaleBalances;
    mapping(address => uint256) public vestedPrivateSaleBalances;
    mapping(address => uint256) public vestedPublicSaleBalances;
    mapping(address => uint256) public vestedVolatileControlBalances;
    mapping(address => uint256) public vestedExchangeListingBalances;
    mapping(address => uint256) public vestedEcosystemDevelopmentBalances;
    mapping(address => uint256) public vestedTeamBalances;
    mapping(address => uint256) public vestedReserveBalances;    
    mapping(address => uint256) public vestedBalances;

    // Events to log the activation of sales
    event SeedSaleActivated(uint256 timestamp);
    event PrivateSaleActivated(uint256 timestamp);
    event PublicSaleActivated(uint256 timestamp);

    event TokensBought(address indexed buyer, uint256 amount);
    event TokensMinted(address indexed to, uint256 amount);
    event TokensBurned(address indexed from, uint256 amount, string reason);
    event TokensWithdrawn(address indexed from, uint256 amount);

constructor() ERC20("Secure Stash", "SST") {
        owner = msg.sender;
        _mint(address(this), 100000000); // * 10 ** decimals());
        
        // Token Allocation
        seedSaleTokens = totalSupply() * 25 / 1000;           // 2.5% of totalSupply
        privateSaleTokens = totalSupply() * 175 / 1000;       // 17.5% of totalSupply
        publicSaleTokens = totalSupply() * 100 / 1000;        // 10% of totalSupply
        volatileControlTokens = totalSupply() * 500 / 1000;   // 50% of totalSupply
        exchangeListingTokens = totalSupply() * 100 / 1000;   // 10% of totalSupply
        ecosystemDevelopmentTokens = totalSupply() * 50 / 1000; // 5% of totalSupply
        teamTokens = totalSupply() * 40 / 1000;               // 4% of totalSupply
        reserveTokens = totalSupply() * 10 / 1000;            // 1% of totalSupply
        
        // Distributing the initial balances. Rest of the tokens released after vesting period.
        initialSeedSaleTokens = (seedSaleTokens * 4) / 100;         //4% of initial tokens allocated for seed sale participants
        initialPrivateSaleTokens = (privateSaleTokens * 4) / 100;   //4% of initial tokens allocated for private sale participants
        initialPublicSaleTokens = (publicSaleTokens * 4) / 100;     //4% of initial tokens allocated for public sale participants
        initialExchangeListingTokens = (exchangeListingTokens * 4) / 100;   //4% of initial tokens allocated for Exchange Listings
        initialEcosystemDevelopmentTokens = (ecosystemDevelopmentTokens * 4) / 100; //4% of initial tokens allocated for Ecosystem Development
        initialTeamTokens = (teamTokens * 4) / 100;                 //4% of initial tokens allocated for team
        initialReserveTokens = (reserveTokens * 4) / 100;           //4% of initial tokens allocated for reserves

        // Amount of tokens to be vested
        vestedSeedSaleTokens = seedSaleTokens - initialSeedSaleTokens;
        vestedPrivateSaleTokens = privateSaleTokens - initialPrivateSaleTokens;
        vestedPublicSaleTokens = publicSaleTokens - initialPublicSaleTokens;
        vestedVolatileControlTokens = volatileControlTokens;         //100% of volatile tokens are vested
        vestedExchangeListingTokens = exchangeListingTokens - initialExchangeListingTokens;
        vestedEcosystemDevelopmentTokens = ecosystemDevelopmentTokens - initialEcosystemDevelopmentTokens;
        vestedTeamTokens = teamTokens - initialTeamTokens;
        vestedReserveTokens = reserveTokens - initialReserveTokens;
        totalVested = vestedSeedSaleTokens + vestedPrivateSaleTokens + vestedPublicSaleTokens + vestedVolatileControlTokens + vestedExchangeListingTokens + vestedEcosystemDevelopmentTokens + vestedTeamTokens + vestedReserveTokens;
    
        // Allocation of vested tokens within contract
        vestedSeedSaleBalances[address(this)] = vestedSeedSaleTokens;
        vestedPrivateSaleBalances[address(this)] = vestedPrivateSaleTokens;
        vestedPublicSaleBalances[address(this)] = vestedPublicSaleTokens;
        vestedVolatileControlBalances[address(this)] = vestedVolatileControlTokens;
        vestedExchangeListingBalances[address(this)] = vestedExchangeListingTokens;
        vestedEcosystemDevelopmentBalances[address(this)] = vestedEcosystemDevelopmentTokens;
        vestedTeamBalances[address(this)] = vestedTeamTokens;
        vestedReserveBalances[address(this)] = vestedReserveTokens;    
        vestedBalances[address(this)] = totalVested;

        // No. of vested tokens released per month
        seedSaleMonthlyRelease = vestedSeedSaleTokens / 48;
        privateSaleMonthlyRelease = vestedPrivateSaleTokens / 48;
        publicSaleMonthlyRelease = vestedPublicSaleTokens / 48;
        exchangeListingMonthlyRelease = vestedExchangeListingTokens / 48;
        ecosystemDevelopmentMonthlyRelease = vestedEcosystemDevelopmentTokens / 48;
        teamMonthlyRelease = vestedTeamTokens / 48;
        reserveMonthlyRelease = vestedReserveTokens / 48;

        // Initial supply mapping
        //totalSupply = maxSupply;
        totalMint = totalSupply();
        circulatingSupply = totalMint - totalBurn - totalVested;

        // Allocation of tokens within contract (Total Balances)
        totalSeedSaleBalances[address(this)] = seedSaleTokens;
        totalPrivateSaleBalances[address(this)] = privateSaleTokens;
        totalPublicSaleBalances[address(this)] = publicSaleTokens;

        // Allocation of tokens within contract (Initial Balances)
        volatileControlBalances[address(this)] = 0;         
        exchangeListingBalances[address(this)] = initialExchangeListingTokens;         
        ecosystemDevelopmentBalances[address(this)] = initialEcosystemDevelopmentTokens;    
        teamBalances[address(this)] = initialTeamTokens;
        reserveBalances[address(this)] = initialReserveTokens;
        balances[address(this)] = circulatingSupply;
    
        isSeedSaleActive = false;
        isPrivateSaleActive = false;
        isPublicSaleActive = false;
    }

    // Setting owmer as the modifier
    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this operation");
        _;
    }

    // Modifier to check if the seed sale is active
    modifier onlyWhenSeedSaleActive() {
        require(isSeedSaleActive, "Seed Sale is not active");
        _;
    }

    // Modifier to check if the private sale is active
    modifier onlyWhenPrivateSaleActive() {
        require(isPrivateSaleActive, "Private Sale is not active");
        _;
    }

    // Modifier to check if the public sale is active
    modifier onlyWhenPublicSaleActive() {
        require(isPublicSaleActive, "Public Sale is not active");
        _;
    }

    function setTaxRates(uint256 _taxRate) external onlyOwner {
        require(_taxRate < 5, "Tax cannot exceed 0.5%");
        taxRate = _taxRate;
    }

    // Function to add a DEX address
    function addDex(address _dex) public onlyOwner {
        isDex[_dex] = true;
    }

    // Function to remove a DEX address
    function removeDex(address _dex) public onlyOwner {
        isDex[_dex] = false;
    }

    function transfer(address recipient, uint256 amount) public override returns (bool) {
        require(balances[msg.sender] >= amount, "Insufficient balance");
        uint256 tax = 0;
        if (isDex[recipient] || isDex[msg.sender]) {
            tax = (amount * taxRate) / 1000; // Calculate tax
        }
        uint256 netValue = amount - tax; // Calculate net value to be transferred

        // Send tax to dead wallet and reduce total supply
        if (tax > 0) {
            super.transfer(deadWallet, tax);
            _burn(deadWallet, tax); // Burn the tokens sent to the dead wallet
            totalBurn = totalBurn + tax; // Update total tokens burnt
            emit TokensBurned(msg.sender, tax, "Tax Burn");
        }

        return super.transfer(recipient, netValue); // Call the original transfer function from ERC20
    }

    function activateSeedSale(uint256 rate) public onlyOwner {
        seedSaleRate = rate;
        isSeedSaleActive = true;
        emit SeedSaleActivated(block.timestamp);
    }

    function activatePrivateSale(uint256 rate) public onlyOwner {
        privateSaleRate = rate;
        isPrivateSaleActive = true;
        emit PrivateSaleActivated(block.timestamp);
    }

    function activatePublicSale(uint256 rate) public onlyOwner {
        publicSaleRate = rate;
        isPublicSaleActive = true;
        emit PublicSaleActivated(block.timestamp);
    }

    function mint(uint256 amount) public onlyOwner {
        require((totalSupply() + amount) <= maxSupply, "Cannot exceed Maximum supply");
        _mint (address(this), amount);
        ecosystemDevelopmentBalances[address(this)] += amount; //Minted tokens gets allocated to ecosytem development
        totalMint += amount;
        emit TokensMinted(address(this), amount);
    }

    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
        totalBurn += amount;
        emit TokensBurned(msg.sender, amount, "Manual Burn");
    }

    function buySeedSale(uint256 amount) public payable onlyWhenSeedSaleActive nonReentrant {
        //require(rate == 1, "Rate should be 0.1 USD per token");
        require(msg.value == amount * seedSaleRate, "Insufficient amount");
        require(amount <= totalSeedSaleBalances[address(this)], "Not enough tokens available for seed sale");
        uint256 initialAllocation = (amount * 4) / 100; // Calculate the initial allocation (4% of the bought amount)
        vestedSeedSaleBalances[msg.sender] += (amount - initialAllocation); // Update the vested balance for the buyer
        SeedSaleSold += amount; // Update the total sold amount
        totalSeedSaleBalances[msg.sender] += amount; // Update the balances
        totalSeedSaleBalances[address(this)] -= amount; // Update the balances
        _transfer(address(this), msg.sender, initialAllocation); // Transfer the initial allocation to the buyer
        emit TokensBought(msg.sender, amount); // Emit the TokensBought event
    }

    function buyPrivateSale(uint256 amount) public payable onlyWhenPrivateSaleActive nonReentrant {
        //require(rate == 1, "Rate should be 0.1 USD per token");
        require(msg.value == amount * privateSaleRate, "Insufficient amount");
        require(amount <= totalPrivateSaleBalances[address(this)], "Not enough tokens available for private sale");
        uint256 initialAllocation = (amount * 4) / 100; // Calculate the initial allocation (4% of the bought amount)
        vestedPrivateSaleBalances[msg.sender] += (amount - initialAllocation); // Update the vested balance for the buyer
        PrivateSaleSold += amount; // Update the total sold amount
        totalPrivateSaleBalances[msg.sender] += amount; // Update the balances
        totalPrivateSaleBalances[address(this)] -= amount; // Update the balances
        _transfer(address(this), msg.sender, initialAllocation); // Transfer the initial allocation to the buyer
        emit TokensBought(msg.sender, amount); // Emit the TokensBought event
    }
    
    function buyPublicSale(uint256 amount) public payable onlyWhenPublicSaleActive nonReentrant {
        //require(rate == 5, "Rate should be 0.5 USD per token");
        require(msg.value == amount * publicSaleRate, "Insufficient amount");
        require(amount <= totalPublicSaleBalances[address(this)], "Not enough tokens available for public sale");
        uint256 initialAllocation = (amount * 4) / 100; // Calculate the initial allocation (4% of the bought amount)
        vestedPublicSaleBalances[msg.sender] += (amount - initialAllocation); // Update the vested balance for the buyer
        PublicSaleSold += amount; // Update the total sold amount
        totalPublicSaleBalances[msg.sender] += amount; // Update the balances
        totalPublicSaleBalances[address(this)] -= amount; // Update the balances
        _transfer(address(this), msg.sender, initialAllocation); // Transfer the initial allocation to the buyer
        emit TokensBought(msg.sender, amount); // Emit the TokensBought event
    }

    function withdrawTokenSaleVestedTokens() public nonReentrant {
        require(block.timestamp > lastWithdrawal[msg.sender] + 30 days, "Only one withdrawal allowed per month");
        uint256 amount = 0;

        if (vestedSeedSaleBalances[msg.sender] > 0) {
            require(block.timestamp > lastWithdrawal[msg.sender] + TOKENS_RELEASE, "Not yet time to release next batch of tokens");
            amount = (totalSeedSaleBalances[msg.sender] * seedSaleMonthlyRelease) / SeedSaleSold;
            vestedSeedSaleBalances[msg.sender] -= amount; // update the vested seed sale balances
        } else if (vestedPrivateSaleBalances[msg.sender] > 0) {
            require(block.timestamp > lastWithdrawal[msg.sender] + TOKENS_RELEASE, "Not yet time to release next batch of tokens");
            amount = (totalPrivateSaleBalances[msg.sender] * privateSaleMonthlyRelease) / PrivateSaleSold;
            vestedPrivateSaleBalances[msg.sender] -= amount; // update the vested Private Sale Balances
        } else if (vestedPublicSaleBalances[msg.sender] > 0) {
            require(block.timestamp > lastWithdrawal[msg.sender] + TOKENS_RELEASE, "Not yet time to release next batch of tokens");
            amount = (totalPublicSaleBalances[msg.sender] * publicSaleMonthlyRelease) / PublicSaleSold;
            vestedPublicSaleBalances[msg.sender] -= amount; // update the vested Public Sale Balances
        }

        require(amount > 0, "No tokens to withdraw");
        _transfer(address(this), msg.sender, amount); // Transfer the tokens from the contract to the user
        totalVested -= amount;
        lastWithdrawal[msg.sender] = block.timestamp;
        emit TokensWithdrawn(msg.sender, amount);
    }

    function withdrawVolatileControlTokens() public onlyOwner nonReentrant {
        require(block.timestamp > 180 days, "Vesting period is not over");
        require(vestedVolatileControlBalances[address(this)] > 0, "No tokens to withdraw");
        balances[address(this)] += volatileControlTokens;
        vestedVolatileControlBalances[address(this)] -= volatileControlTokens;
        emit TokensWithdrawn(address(this), volatileControlTokens);
    }

    function withdrawOtherVestedTokens() public onlyOwner nonReentrant {
        require(block.timestamp > lastWithdrawal[msg.sender] + 30 days, "Only one withdrawal allowed per month");
        require(totalVested > 0, "No tokens to withdraw");
        vestedExchangeListingBalances[address(this)] -= exchangeListingMonthlyRelease;
        vestedEcosystemDevelopmentBalances[address(this)] -= ecosystemDevelopmentMonthlyRelease;
        vestedTeamBalances[address(this)] -= teamMonthlyRelease;
        vestedReserveBalances[address(this)] -= reserveMonthlyRelease;
        uint256 totalMonthlyRelease = exchangeListingMonthlyRelease + ecosystemDevelopmentMonthlyRelease + teamMonthlyRelease + reserveMonthlyRelease;
        vestedBalances[address(this)] -= totalMonthlyRelease;
        totalVested -= totalMonthlyRelease;
        balances[address(this)] += totalMonthlyRelease;
        emit TokensWithdrawn(address(this), totalMonthlyRelease);
        lastWithdrawal[msg.sender] = block.timestamp;
    }
}
