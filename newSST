// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract SecureStash is ERC20, Ownable, ReentrancyGuard {
    uint256 _totalSupply = totalSupply();
    uint256 public circulatingSupply;
    uint256 public totalMint;
    uint256 public totalBurn;
    uint256 public totalVested;
    uint256 public taxRate = 5;     // 0.5% tax applied only on DEX trades
    address public deadWallet = 0x000000000000000000000000000000000000dEaD;
    uint256 public constant maxSupply = 100000000; // * 10 ** 18; // 100M tokens with 18 decimals
    
    // Enum to define the type of sale
    enum SaleType { Seed, Private, Public }
    enum OtherAllocationType { VolatileControl, ExchangeListing, EcosystemDevelopment, Team, Reserve }
    // Struct to hold sale details
    struct Sale {
        uint256 tokens;
        uint256 initialAllocation;
        uint256 vestedTokens;
        uint256 monthlyRelease;
        uint256 sold;
        uint256 rate;
        bool isActive;
    }

    // Struct to hold rest of the token allocation details
    struct OtherAllocation {
        uint256 tokens;
        uint256 initialAllocation;
        uint256 vestedTokens;
        uint256 monthlyRelease;
    }
    // Mapping from SaleType to Sale
    mapping(SaleType => Sale) public sales;
    mapping(OtherAllocationType => OtherAllocation) public distribution;
    mapping(uint => mapping(address => uint256)) public initialSaleBalances;
    mapping(uint => mapping(address => uint256)) public totalSaleBalances;
    mapping(uint => mapping(address => uint256)) public totalVestedBalances;
    mapping(uint => mapping(address => uint256)) public otherAllocationBalances;
    //mapping(address => uint256) vestedTokens;

    uint256 public constant TOKENS_RELEASE = 30 days;

    mapping(address => uint256) public lastWithdrawal;
    mapping(address => bool) public isDex; // Mapping to keep track of DEX addresses
    mapping(address => uint256) public ecosystemDevelopmentBalances;    // Balances excluding vested tokens

/*    mapping(address => uint256) public totalSeedSaleBalances;
    mapping(address => uint256) public totalPrivateSaleBalances;
    mapping(address => uint256) public totalPublicSaleBalances;
    mapping(address => uint256) public volatileControlBalances;         // Balances excluding vested tokens
    mapping(address => uint256) public exchangeListingBalances;         // Balances excluding vested tokens
    mapping(address => uint256) public ecosystemDevelopmentBalances;    // Balances excluding vested tokens
    mapping(address => uint256) public teamBalances;                    // Balances excluding vested tokens
    mapping(address => uint256) public reserveBalances;                 // Balances excluding vested tokens
    //mapping(address => uint256) public balances;                        // Balances excluding vested tokens
*/
    event TokensBought(address indexed buyer, uint256 amount);
    event TokensMinted(address indexed to, uint256 amount);
    event TokensBurned(address indexed from, uint256 amount, string reason);
    event TokensWithdrawn(address indexed from, uint256 amount);
    
    // Event to log the activation of sales
    event SaleActivated(SaleType saleType, uint256 timestamp);

    constructor() ERC20("Secure Stash", "SST") {
        //owner = msg.sender;
        _mint(address(this), 100000000); // * 10 ** decimals());

        // Initializing the seedSale, privateSale, and publicSale
        sales[SaleType.Seed] = Sale({
            tokens: totalSupply() * 25 / 1000,
            initialAllocation: (totalSupply() * 25 / 1000 * 4) / 100,
            vestedTokens: (totalSupply() * 25 / 1000 * 96) / 100,
            //monthlyRelease: ((totalSupply() * 25 / 1000 * 96) / 100) / 48,
            monthlyRelease: 0,
            sold: 0,
            rate: 0,
            isActive: false
        });

        sales[SaleType.Private] = Sale({
            tokens: totalSupply() * 175 / 1000,
            initialAllocation: (totalSupply() * 175 / 1000 * 4) / 100,
            vestedTokens: (totalSupply() * 175 / 1000 * 96) / 100,
            //monthlyRelease: ((totalSupply() * 175 / 1000 * 96) / 100) / 48,
            monthlyRelease: 0,
            sold: 0,
            rate: 0,
            isActive: false
        });

        sales[SaleType.Public] = Sale({
            tokens: totalSupply() * 100 / 1000,
            initialAllocation: (totalSupply() * 100 / 1000 * 4) / 100,
            vestedTokens: (totalSupply() * 100 / 1000 * 96) / 100,
            //monthlyRelease: ((totalSupply() * 100 / 1000 * 96) / 100) / 48,
            monthlyRelease: 0,
            sold: 0,
            rate: 0,
            isActive: false
        });
        
        // Initializing rest of the token allocation
        distribution[OtherAllocationType.VolatileControl] = OtherAllocation({
            tokens: totalSupply() * 500 / 1000,
            initialAllocation: (totalSupply() * 500 / 1000),
            vestedTokens: 0,
            monthlyRelease: 0
        });

        distribution[OtherAllocationType.ExchangeListing] = OtherAllocation({
            tokens: totalSupply() * 100 / 1000,
            initialAllocation: (totalSupply() * 100 / 1000 * 4) / 100,
            vestedTokens: (totalSupply() * 100 / 1000 * 96) / 100,
            monthlyRelease: ((totalSupply() * 100 / 1000 * 96) / 100) / 48
        });

        distribution[OtherAllocationType.EcosystemDevelopment] = OtherAllocation({
            tokens: totalSupply() * 50 / 1000,
            initialAllocation: (totalSupply() * 50 / 1000 * 4) / 100,
            vestedTokens: (totalSupply() * 50 / 1000 * 96) / 100,
            monthlyRelease: ((totalSupply() * 50 / 1000 * 96) / 100) / 48
        });

        distribution[OtherAllocationType.Team] = OtherAllocation({
            tokens: totalSupply() * 40 / 1000,
            initialAllocation: (totalSupply() * 40 / 1000 * 4) / 100,
            vestedTokens: (totalSupply() * 40 / 1000 * 96) / 100,
            monthlyRelease: ((totalSupply() * 40 / 1000 * 96) / 100) / 48
        });

        distribution[OtherAllocationType.Reserve] = OtherAllocation({
            tokens: totalSupply() * 10 / 1000,
            initialAllocation: (totalSupply() * 10 / 1000 * 4) / 100,
            vestedTokens: (totalSupply() * 10 / 1000 * 96) / 100,
            monthlyRelease: ((totalSupply() * 10 / 1000 * 96) / 100) / 48
        });
    }

    // Modifier to check if the sale is active
    modifier onlyWhenSaleActive(SaleType saleType) {
        require(sales[saleType].isActive, "Sale is not active");
        _;
    }

    // Function to activate a sale
    function activateSale(SaleType saleType, uint256 rate) public onlyOwner {
        Sale storage sale = sales[saleType];
        sale.rate = rate;
        sale.isActive = true;
        emit SaleActivated(saleType, block.timestamp);
    }

    function setTaxRates(uint256 _taxRate) external onlyOwner {
        require(_taxRate <= 5, "Tax cannot exceed 0.5%");
        taxRate = _taxRate;
    }

    // Function to add a DEX address
    function addDex(address _dex) public onlyOwner {
        isDex[_dex] = true;
    }

    // Function to remove a DEX address
    function removeDex(address _dex) public onlyOwner {
        isDex[_dex] = false;
    }

    function transfer(address recipient, uint256 amount) public override nonReentrant returns (bool) {
        require(balanceOf(msg.sender) >= amount, "Insufficient balance");
        uint256 tax = 0;
        if (isDex[recipient] || isDex[msg.sender]) {
            tax = (amount * taxRate) / 1000; // Calculate tax
        }
        uint256 netValue = amount - tax; // Calculate net value to be transferred

        // Send tax to dead wallet and reduce total supply
        if (tax > 0) {
            super.transfer(deadWallet, tax);
            _burn(deadWallet, tax); // Burn the tokens sent to the dead wallet
            totalBurn = totalBurn + tax; // Update total tokens burnt
            emit TokensBurned(msg.sender, tax, "Tax Burn");
        }

        return super.transfer(recipient, netValue); // Call the original transfer function from ERC20
    }

    function mint(uint256 amount) public onlyOwner {
        require((totalSupply() + amount) <= maxSupply, "Cannot exceed Maximum supply");
        _mint (address(this), amount);
        ecosystemDevelopmentBalances[address(this)] += amount; //Minted tokens gets allocated to ecosytem development
        totalMint += amount;
        emit TokensMinted(address(this), amount);
    }

    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
        totalBurn += amount;
        emit TokensBurned(msg.sender, amount, "Manual Burn");
    }

    function buySale(SaleType saleType, uint256 amount) public payable onlyWhenSaleActive(saleType) nonReentrant {
        Sale storage sale = sales[saleType];                     // Access the sale from the mapping based on SaleType
        require(msg.value == amount * sales[saleType].rate, "Insufficient amount");
        require(amount <= sale.tokens, "Not enough tokens available for sale");
        
        uint256 tokensSent = (amount * 4) / 100;  // Initial sale tokens sent
        sale.sold += amount;                                     // Update the total sold amount
        sale.tokens -= amount;                                   // Update available sale total balances
        initialSaleBalances[uint(saleType)][msg.sender] += tokensSent; // Update buyer's initial sale balances
        totalSaleBalances[uint(saleType)][msg.sender] += amount; // Update buyer's total sale balances
        totalSaleBalances[uint(saleType)][address(this)] -= amount; // Update available sale balances in contract
        _transfer(address(this), msg.sender, tokensSent);        // Transfer the initial allocation to the buyer
        emit TokensBought(msg.sender, amount);                   // Emit the TokensBought event
        }
    
    function withdrawSaleVestedTokens() public nonReentrant {
        uint256 totalAmount = 0;

        // Iterate over each sale type
        for (uint i = 0; i < 3; i++) {
            SaleType saleType = SaleType(i);
            Sale storage sale = sales[saleType];

        // Skip the sale if it's not active or no vested tokens
        if (sale.vestedTokens == 0) continue;
            require(block.timestamp > lastWithdrawal[msg.sender] + TOKENS_RELEASE, "Not yet time to release next batch of tokens");
            //require(sale.vestedTokens[msg.sender] > 0, "No tokens available in vesting");
            uint256 amount = (totalSaleBalances[uint(saleType)][msg.sender] - initialSaleBalances[uint(saleType)][msg.sender]) / 48;
            sale.vestedTokens -= amount; // Update the total vested tokens for the sale
            totalVestedBalances[uint(saleType)][address(this)] -= amount;
            totalAmount += amount;
        }

        require(totalAmount > 0, "No tokens to withdraw");
        _transfer(address(this), msg.sender, totalAmount); // Transfer the total tokens from the contract to the user
        lastWithdrawal[msg.sender] = block.timestamp;
        emit TokensWithdrawn(msg.sender, totalAmount);
    }

    function withdrawOtherVestedTokens() public onlyOwner nonReentrant {
        uint256 totalAmount = 0;

        // Iterate over each sale type
        for (uint i = 0; i < 5; i++) {
            OtherAllocationType otherAllocationType = OtherAllocationType(i);
            OtherAllocation storage otherAllocation = distribution[otherAllocationType];

        // Skip the sale if it's not active or no vested tokens
        if (otherAllocation.vestedTokens == 0) continue;
            require(block.timestamp > lastWithdrawal[address(this)] + TOKENS_RELEASE, "Not yet time to release next batch of tokens");
            uint256 amount = (otherAllocation.monthlyRelease);
            otherAllocationBalances[uint(otherAllocationType)][address(this)] -= amount; // Update the vested sale balances
            otherAllocation.vestedTokens -= amount; // Update the total vested tokens for the sale
            totalAmount += amount;
        }

        require(totalAmount > 0, "No tokens to withdraw");
        _transfer(address(this), msg.sender, totalAmount); // Transfer the total tokens from the contract to the user
        lastWithdrawal[msg.sender] = block.timestamp;
        emit TokensWithdrawn(address(this), totalAmount);
    }
}
