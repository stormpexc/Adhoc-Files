// SPDX-License-Identifier: MIT

/*
Website : https://securestash.in
Telegram: https://t.me/securestash
Twitter : https://twitter.com/SecureStash
Github  : https://github.com/SecureStash/
    
Token Sale Price Estimation:
 * The given prices may vary depending on the BNB price when the transaction occurs.
    EarlyBird   : 1 BNB = 8000 SST tokens
    Private Sale: 1 BNB = 400 SST tokens
    Public Sale : 1 BNB = 250 SST tokens

Tokenomics:-
    
    Max Supply  : 100,000,000 SST tokens
    
    Early Bird (2.5%)          :  2,500,000 SST tokens
    Private Sale (17.5%)       : 17,500,000 SST tokens
    Public Sale (10%)          : 10,000,000 SST tokens
    Volatile Control (50%)     : 50,000,000 SST tokens. These tokens are allocated to the CLVT contract to ensure price stability, closely mirroring fiat currency.
    Exchange Listing (10%)     : 10,000,000 SST tokens
    Ecosystem Development (5%) :  5,000,000 SST tokens
    Team (4%)                  :  4,000,000 SST tokens
    Reserves (1%)              :  1,000,000 SST tokens

 * All tokens are unlocked 4% at Token Generation Event, followed by monthly vesting over 48 months.
 * 30M SST tokens set aside for sales will not be vested during the Token Generation Event.
 * Tokens once sold will adhere to the vesting schedule.
 * Unsold tokens will be available in contract and will be offered at a variable price in subsequent Private Sale (similar to OTC) and will follow the same vesting plan.
 * Tokens assigned for Volatile Control and sent to the CLVT protocol can only be accessed via governance.
 * Tokens for Ecosystem Development will be allocated to a multisig wallet.
 * Reserve tokens will be sold periodically and converted into other decentralized assets to serve as backup funds.

 Key Points:
 1) Trades on DEX will incur a maximum burn tax of 0.5%. Owner will whitelist the DEX address to activate this burn tax for the specific DEX.
 2) Owner can create new tokens, but the total cannot exceed 100M Total Supply. Any new tokens minted will be directly sent by the contract to the ecosystem development wallet.
 3) Owner can change the wallet addresses for token allocations (Volatile Control, Exchange Listing, Ecosystem Development, Team, Reserve).
 4) Owner can allocate additional tokens for sale without exceeding supply or stop an inprogress sale.

*/

pragma solidity ^0.8.20;
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract SecureStash is ERC20, Ownable, ReentrancyGuard {
    uint256 public circulatingSupply;
    uint256 public totalMint;
    uint256 public totalBurn;
    uint256 public totalVested;
    address public deadWallet;
    uint256 public launchTime;
    uint256 public totalTokensAllocatedForSales;
    uint256 public constant MAX_SUPPLY = 100000000;  // * 10 ** 18; // 100M tokens with 18 decimals
    uint256 public TAX_RATE = 5;                                    // 0.5% tax applied only on DEX trades
    uint256 public constant TOKENS_RELEASE = 30;//1 minute;
    //uint256 public constant TOKENS_RELEASE = 30 days;
    uint256 public constant MONTHS_IN_4_YEARS = 48;
    uint256 public constant INITIAL_RELEASE_PERCENTAGE = 4;
    uint256 public constant VESTING_PERCENTAGE = 96;
    
    uint256 internal constant combinedSalePercentage = 30;          // 30% of the total supply (Early Bird + Private + Public)
    uint256 internal constant volatileControlPercentage = 50;       // 50% of the total supply
    uint256 internal constant exchangeListingPercentage = 10;       // 10% of the total supply
    uint256 internal constant ecosystemDevelopmentPercentage = 5;   // 5% of the total supply
    uint256 internal constant teamPercentage = 4;                   // 4% of the total supply
    uint256 internal constant reservesPercentage = 1;               // 1% of the total supply
    address[5] public fundAllocationAddressesArray;                 // Array to store fund allocation addresses
    //bool public paused = false;                                     // State variable to track if sales are paused

    enum SaleType { EarlyBird, Private, Public }
    enum AllocationType { VolatileControl, ExchangeListing, EcosystemDevelopment, Team, Reserve }

    // Struct to hold sale details
    struct Sale {
        uint256 tokensAvailable;
        uint256 rate;
        bool isActive;
    }
 
    struct SaleData {
        uint256 initialBalance;
        uint256 vestedTokens;
        uint256 totalVested;
        uint256 totalSale;
        uint256 monthlyRelease;
    }
    
    struct AllocationAddress {
        string allocationType;
        address addr;
    }

    mapping(SaleType => Sale) public sales;                                     
    mapping(SaleType => uint256) public totalTokensSold;
    mapping(address => uint256) public lastWithdrawal;
    mapping(address => bool) public isDex;
    mapping(address => AllocationType) public addressToAllocationType;
    mapping(address => bool) public isWhitelisted;
    mapping(uint => mapping(address => uint256)) public vestedSaleTokens;
    mapping(uint => mapping(address => uint256)) public totalVestedBalances;
    mapping(uint => mapping(address => SaleData)) public saleData;
    mapping(AllocationType => uint256) public tokensAllocated;
    mapping(AllocationType => bool) public initialDistributionDone;
    mapping(address => uint256) private _balances;
    
    
    event TokensBought(address indexed buyer, uint256 amount);
    event TokensMinted(address indexed to, uint256 amount);
    event TokensBurned(address indexed from, uint256 amount, string reason);
    event TokensWithdrawn(address indexed from, uint256 amount);
    event TokenAllocated(address indexed sender, address indexed recipient, uint256 amount, AllocationType allocationType);
    event TokenVested(address indexed beneficiary, uint256 amount, AllocationType allocationType, uint256 timestamp);
    event SaleRateUpdated(SaleType saleType, uint256 newRate);
    event SaleActivated(SaleType saleType, uint256 timestamp);
    event SaleStopped(SaleType saleType);

    constructor() ERC20("Secure Stash", "SST") {
        _mint(address(this), MAX_SUPPLY);
        totalMint = totalSupply();
        launchTime =  block.timestamp;
        lastWithdrawal[address(this)] = launchTime;
        deadWallet = 0x000000000000000000000000000000000000dEaD;

        tokensAllocated[AllocationType.VolatileControl] = (totalSupply() * volatileControlPercentage / 100 * INITIAL_RELEASE_PERCENTAGE) / 100;
        tokensAllocated[AllocationType.ExchangeListing] = (totalSupply() * exchangeListingPercentage / 100 * INITIAL_RELEASE_PERCENTAGE) / 100;
        tokensAllocated[AllocationType.EcosystemDevelopment] = (totalSupply() * ecosystemDevelopmentPercentage / 100 * INITIAL_RELEASE_PERCENTAGE) / 100;
        tokensAllocated[AllocationType.Team] = (totalSupply() * teamPercentage / 100 * INITIAL_RELEASE_PERCENTAGE) / 100;
        tokensAllocated[AllocationType.Reserve] = (totalSupply() * reservesPercentage / 100 * INITIAL_RELEASE_PERCENTAGE) / 100;

        // 96% of the 70M (excluding 30M allocated for sales) are vested. Tokens sold are vested through buy function.
        totalVested = (totalSupply() * volatileControlPercentage / 100 * VESTING_PERCENTAGE) / 100
                    + (totalSupply() * exchangeListingPercentage / 100 * VESTING_PERCENTAGE) / 100
                    + (totalSupply() * ecosystemDevelopmentPercentage / 100 * VESTING_PERCENTAGE) / 100
                    + (totalSupply() * teamPercentage / 100 * VESTING_PERCENTAGE) / 100
                    + (totalSupply() * reservesPercentage / 100 * VESTING_PERCENTAGE) / 100;
        
        totalTokensAllocatedForSales =  (totalSupply() * combinedSalePercentage) / 100;
        circulatingSupply = totalMint - totalBurn - totalVested;
    }

    // Modifier to check if the sale is active
    modifier onlyWhenSaleActive(SaleType saleType) {
        require(sales[saleType].isActive, "Sale is not active");
        _;
    }

    //Modifier to check if users are eligible to participate in EarlyBird or private sale
    modifier onlyWhitelisted() {
        require(isWhitelisted[msg.sender], "Address not whitelisted");
        _;
    }
    
    // Function to activate a sale
    function activateSale(SaleType saleType, uint256 rate, uint256 tokensForSale) public onlyOwner {
        require(tokensForSale > 0, "Tokens for sale should be greater than 0");
        require(!sales[saleType].isActive, "Sale is already active");
        require(tokensForSale <= totalTokensAllocatedForSales, "Not enough tokens allocated for sale"); // Check against totalTokensAllocatedForSales

        Sale storage sale = sales[saleType];
        sale.rate = rate;
        sale.tokensAvailable = tokensForSale;  // Update the tokens available for the sale
        sale.isActive = true;
        totalTokensAllocatedForSales -= tokensForSale; // Deduct the tokens allocated for this sale

        emit SaleActivated(saleType, block.timestamp);
    }
/*
        // Function to pause a sale
    function pauseSale(SaleType saleType) external onlyOwner {
        require(sales[saleType].isActive, "Sale is not active");
        sales[saleType].isActive = false;
        emit SalePaused(saleType);
    }

    // Function to resume a sale with an option to set a new rate
    function resumeSale(SaleType saleType, uint256 newRate) external onlyOwner {
        require(sales[saleType].wasActived, "Sale was never activated");
        require(!sales[saleType].isActive, "Sale is already active");
        sales[saleType].rate = newRate;  // Update the sale rate with the new rate
        sales[saleType].isActive = true;
        emit SaleResumed(saleType, newRate);
    }
*/
    function stopSale(SaleType saleType) external onlyOwner {
        require(sales[saleType].isActive, "Sale is still active");
        totalTokensAllocatedForSales += sales[saleType].tokensAvailable;
        require(totalTokensAllocatedForSales > 0, "No unsold tokens available");
        sales[saleType].tokensAvailable = 0; // Reset tokens available for the sale
        emit SaleStopped(saleType);
    }


    //Function to whitelist users to participate in EarlyBird or private sale
    function addToWhitelist(address _address) external onlyOwner {
        isWhitelisted[_address] = true;
    }

    function removeFromWhitelist(address _address) external onlyOwner {
        isWhitelisted[_address] = false;
    }
    
    function setTaxRates(uint256 _taxRate) external onlyOwner {
        require(_taxRate <= 5, "Tax cannot exceed 0.5%");
        TAX_RATE = _taxRate;
    }

    // Function to add a DEX address
    function addDex(address _dex) public onlyOwner {
        isDex[_dex] = true;
    }
    
    // Function to remove a DEX address
    function removeDex(address _dex) public onlyOwner {
        isDex[_dex] = false;
    }

    function _updateCirculatingSupply() private {
        circulatingSupply = totalMint - totalBurn - totalVested;
    }

    function transfer(address recipient, uint256 amount) public override nonReentrant returns (bool) {
        require(balanceOf(msg.sender) >= amount, "Insufficient balance");
        uint256 tax = 0;
        if (isDex[recipient] || isDex[msg.sender]) {
            tax = (amount * TAX_RATE) / 1000;                // Calculate tax
        }
        uint256 netValue = amount - tax;                    // Calculate net value to be transferred

        // Send tax to dead wallet and reduce total supply
        if (tax > 0) {
            super.transfer(deadWallet, tax);
            _burn(deadWallet, tax);                         // Burn the tokens sent to the dead wallet
            totalBurn = totalBurn + tax;                    // Update total tokens burnt
            emit TokensBurned(msg.sender, tax, "Tax Burn");
            _updateCirculatingSupply();                     //Update Circulating Supply
        }
        return super.transfer(recipient, netValue);         // Call the original transfer function
    }

    function updateFundAllocationAddress(AllocationType allocationType, address newAddress) public onlyOwner {
        require(newAddress != address(0), "Invalid address");
        
        // Check if the address is already assigned to another AllocationType
        for (uint i = 0; i < 5; i++) {
            require(fundAllocationAddressesArray[i] != newAddress, "Address already allocated");
        }

        // If the address is already set for the given allocationType, remove it
        for (uint i = 0; i < 5; i++) {
            if (fundAllocationAddressesArray[i] == newAddress) {
                delete addressToAllocationType[fundAllocationAddressesArray[i]];
                fundAllocationAddressesArray[i] = address(0);
            }
        }

        // Update the address for the given allocationType
        addressToAllocationType[newAddress] = allocationType;
        fundAllocationAddressesArray[uint(allocationType)] = newAddress;

        // If the initial distribution hasn't occurred for this allocationType, do it now
        if (!initialDistributionDone[allocationType]){

            // Transfer the tokens allocated for the AllocationType to the new address only if balance is greater than 0
            uint256 tokensToTransfer = tokensAllocated[allocationType];
            _transfer(address(this), newAddress, tokensToTransfer); // Transfer tokens from the contract to the new address

            // Mark the initial distribution as done for this allocationType
            initialDistributionDone[allocationType] = true;
        }
    }

    function mint(uint256 amount) public onlyOwner nonReentrant {
        require((totalSupply() + amount) <= MAX_SUPPLY, "Cannot exceed Maximum supply");
        address ecosystemWallet = fundAllocationAddressesArray[2];              // 2 represents Ecosystem Development
        require(ecosystemWallet != address(0), "Ecosystem wallet not set");
        _mint(ecosystemWallet, amount);
        totalMint += amount;
        _updateCirculatingSupply();
        emit TokensMinted(ecosystemWallet, amount);
    }
    
    function burn(uint256 amount) public nonReentrant {
        _burn(msg.sender, amount);
        totalBurn += amount;
        _updateCirculatingSupply();
        emit TokensBurned(msg.sender, amount, "Manual Burn");
    }

    function _updateUserSale(SaleData storage userSale, uint256 initialAllocation, uint256 vestedTokens, uint256 totalSale, uint256 monthlyRelease) internal {
        userSale.initialBalance += initialAllocation;
        userSale.vestedTokens += vestedTokens;
        userSale.totalSale += totalSale;
        userSale.monthlyRelease += monthlyRelease;
    }

    function buySale(SaleType saleType, uint256 amount) public payable onlyWhenSaleActive(saleType) nonReentrant {
        require(msg.value > 0, "Amount should be greater than 0");
        SaleType currentSaleType = saleType;    // Set currentSaleType as a local variable
        require(amount == msg.value * sales[currentSaleType].rate, "Incorrect amount sent");        

        if (currentSaleType == SaleType.EarlyBird || currentSaleType == SaleType.Private) {
            require(isWhitelisted[msg.sender], "Only whitelisted addresses can participate in this sale");
        }

        Sale storage sale = sales[currentSaleType];                               // Access the sale from the mapping based on SaleType
        require(amount <= sale.tokensAvailable, "Not enough tokens available for sale");
        
        uint256 initialAllocation = (amount * INITIAL_RELEASE_PERCENTAGE) / 100;  // Initial sale tokens sent
        uint256 vestedTokens = amount - initialAllocation;                        // Sale Tokens sent for vesting
        uint256 totalSale = amount;
        uint256 monthlyRelease = ((totalSale - initialAllocation) / MONTHS_IN_4_YEARS);
        totalVested += vestedTokens;                                              // Update the total tokens vested
        sale.tokensAvailable -= amount;                                           // Update available sale total balances
        totalTokensSold[currentSaleType] += amount;                               // Update the total tokens sold for the sale type

        SaleData storage userSale = saleData[uint(currentSaleType)][msg.sender];
        _updateUserSale(userSale, initialAllocation, vestedTokens, totalSale, monthlyRelease);
        _updateCirculatingSupply();
        _transfer(address(this), msg.sender, initialAllocation);
        emit TokensBought(msg.sender, amount);
        payable(owner()).transfer(msg.value);
    }

    function withdrawSaleVestedTokens() public nonReentrant {
        uint256 totalAmount = 0;
        uint256 currentTime = block.timestamp;
        uint256 periodsSinceLaunch = (currentTime - launchTime) / TOKENS_RELEASE;                                                           // No. of months since the contract launch time
        uint256 periodsSinceLastWithdrawal = (currentTime - lastWithdrawal[msg.sender]) / TOKENS_RELEASE;                                   // No. of months since the last withdrawal
        uint256 maxPeriodsToDistribute = (periodsSinceLaunch < MONTHS_IN_4_YEARS) ? periodsSinceLaunch : MONTHS_IN_4_YEARS;
        uint256 periodsWithdrawn = (lastWithdrawal[msg.sender] - launchTime) / TOKENS_RELEASE;
        uint256 periodsPendingDistribution = maxPeriodsToDistribute - periodsWithdrawn;
        require(periodsSinceLastWithdrawal >= 1, "Time since last withdrawal is less than 30 days");   // Ensure the user waits for at least one period before the next withdrawal
        require(periodsPendingDistribution > 0, "No tokens to withdraw");   // Ensure the user waits for at least one period before the next withdrawal
        
        for (uint i = 0; i < 3; i++) {
            SaleType currentSaleType = SaleType(i);
            SaleData storage userSale = saleData[uint(currentSaleType)][msg.sender];
            
            require(vestedSaleTokens[uint(currentSaleType)][msg.sender] > 0, "No tokens available in vesting");        
            uint256 amount = userSale.monthlyRelease * periodsPendingDistribution;
            totalAmount += amount;

            // Ensure there are enough tokens in the contract for the distribution
            require(balanceOf(address(this)) >= amount, "Not enough tokens in the contract");
            require(totalAmount <= totalVested, "Not enough tokens available to withdraw");
            require(amount <= userSale.vestedTokens, "Not enough vested tokens available in user balances");
            
            userSale.vestedTokens -= amount;                                     // Update the user's vested tokens post vesting release
            vestedSaleTokens[uint(currentSaleType)][msg.sender] -= amount;       // Update the remaining balances of user's sale tokens post vesting release
            totalVestedBalances[uint(currentSaleType)][address(this)] -= amount; // Update the remaining balances in contract for sale tokens post vesting release
        }
        totalVested -= totalAmount;
        lastWithdrawal[msg.sender] = currentTime;
        _updateCirculatingSupply();
        _transfer(address(this), msg.sender, totalAmount); // Transfer the total tokens from the contract to the user
        emit TokensWithdrawn(msg.sender, totalAmount);
    }

    function withdrawOtherVestedTokens() public onlyOwner nonReentrant {
        uint256 totalAmount = 0;
        uint256 currentTime = block.timestamp;
        uint256 periodsSinceLaunch = (currentTime - launchTime) / TOKENS_RELEASE;                                                           // No. of months since the contract launch time
        uint256 periodsSinceLastWithdrawal = (currentTime - lastWithdrawal[address(this)]) / TOKENS_RELEASE;                                // No. of months since the last withdrawal
        uint256 maxPeriodsToDistribute = (periodsSinceLaunch < MONTHS_IN_4_YEARS) ? periodsSinceLaunch : MONTHS_IN_4_YEARS;
        uint256 periodsWithdrawn = (lastWithdrawal[address(this)] - launchTime) / TOKENS_RELEASE;
        uint256 periodsPendingDistribution = maxPeriodsToDistribute - periodsWithdrawn;
        
        require(periodsSinceLastWithdrawal >= 1, "Time since last withdrawal is less than 30 days");   // Ensure the user waits for at least one period before the next withdrawal
        require(periodsPendingDistribution > 0, "No tokens to withdraw");   // Ensure the user waits for at least one period before the next withdrawal

        uint256[] memory distributionAmounts = new uint256[](5);            // Array to store vesting distribution per month for Other Allocation
        distributionAmounts[0] = (VESTING_PERCENTAGE * ((MAX_SUPPLY * volatileControlPercentage) / 100) / 100) / MONTHS_IN_4_YEARS;
        distributionAmounts[1] = (VESTING_PERCENTAGE * ((MAX_SUPPLY * exchangeListingPercentage) / 100) / 100) / MONTHS_IN_4_YEARS;
        distributionAmounts[2] = (VESTING_PERCENTAGE * ((MAX_SUPPLY * ecosystemDevelopmentPercentage) / 100) / 100) / MONTHS_IN_4_YEARS;
        distributionAmounts[3] = (VESTING_PERCENTAGE * ((MAX_SUPPLY * teamPercentage) / 100) / 100) / MONTHS_IN_4_YEARS;
        distributionAmounts[4] = (VESTING_PERCENTAGE * ((MAX_SUPPLY * reservesPercentage) / 100) / 100) / MONTHS_IN_4_YEARS;        
        
        for (uint i = 0; i < 5; i++) {
            uint256 amount = distributionAmounts[i] * periodsPendingDistribution;
            totalAmount += amount;

            // Ensure there are enough tokens in the contract for the distribution
            require(balanceOf(address(this)) >= amount, "Not enough tokens in the contract");
            // Ensure there are enough vested tokens for the distribution    
            require(totalAmount <= totalVested, "Not enough vested tokens available");
            // Transfer the tokens directly to the respective address in fundAllocationAddressesArray
            _transfer(address(this), fundAllocationAddressesArray[i], amount);
        }
        
        // Update the total vested tokens and circulating supply
        totalVested -= totalAmount;
        lastWithdrawal[address(this)] = currentTime;
        _updateCirculatingSupply();
        emit TokensWithdrawn(address(this), totalAmount);
    }

    //function getVestedBalances(address _user) public view returns (uint256 totalBalance) {
    function getVestedBalances(address _user) public view returns (uint256 earlyBirdBalance, uint256 privateSaleBalance, uint256 publicSaleBalance, uint256 totalBalance) {
       /* uint256 earlyBirdBalance = vestedSaleTokens[0][_user];
        uint256 privateSaleBalance = vestedSaleTokens[1][_user];
        uint256 publicSaleBalance = vestedSaleTokens[2][_user];
*/
        earlyBirdBalance = vestedSaleTokens[0][_user];
        privateSaleBalance = vestedSaleTokens[1][_user];
        publicSaleBalance = vestedSaleTokens[2][_user];
        
        totalBalance = earlyBirdBalance + privateSaleBalance + publicSaleBalance;
        
        return (earlyBirdBalance, privateSaleBalance, publicSaleBalance, totalBalance);
        //return totalBalance;
    }
    
    function getSaleBalances() public view returns (uint256 EarlyBirdSold, uint256 PrivateSold, uint256 PublicSold, uint256 TotalSold) {
        return (
            totalTokensSold[SaleType.EarlyBird],
            totalTokensSold[SaleType.Private],
            totalTokensSold[SaleType.Public],
            totalTokensSold[SaleType.EarlyBird] + totalTokensSold[SaleType.Private] + totalTokensSold[SaleType.Public]
        );
    }

    function getOtherAllocationTypeAddress() public view returns (address VolatileControl, address ExchangeListing, address EcosystemDevelopment, address Team, address Reserve) {
        return (
            fundAllocationAddressesArray[uint(AllocationType.VolatileControl)], 
            fundAllocationAddressesArray[uint(AllocationType.ExchangeListing)], 
            fundAllocationAddressesArray[uint(AllocationType.EcosystemDevelopment)], 
            fundAllocationAddressesArray[uint(AllocationType.Team)], 
            fundAllocationAddressesArray[uint(AllocationType.Reserve)]);
    }

    function getOtherAllocationTypeBalances() public view returns (uint256 VolatileControl, uint256 ExchangeListing, uint256 EcosystemDevelopment, uint256 Team, uint256 Reserve) {
        return (
            balanceOf(fundAllocationAddressesArray[uint(AllocationType.VolatileControl)]), 
            balanceOf(fundAllocationAddressesArray[uint(AllocationType.ExchangeListing)]), 
            balanceOf(fundAllocationAddressesArray[uint(AllocationType.EcosystemDevelopment)]), 
            balanceOf(fundAllocationAddressesArray[uint(AllocationType.Team)]), 
            balanceOf(fundAllocationAddressesArray[uint(AllocationType.Reserve)]));
    }
 
    function getTotalSupply() public view returns (uint256) {
        return totalSupply();
    }

    function getCirculatingSupply() public view returns (uint256) {
        return circulatingSupply;
    }
  
    function getTotalBurns() public view returns (uint256) {
        return totalBurn;
    }
    
}
