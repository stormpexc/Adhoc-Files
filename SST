// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract SecureStash is ERC20, Ownable, ReentrancyGuard {
    uint256 public circulatingSupply;
    uint256 public totalMint;
    uint256 public totalBurn;
    uint256 public totalVested;
    address public deadWallet = 0x000000000000000000000000000000000000dEaD;
    //address constant USDT_ADDRESS = address(0xdAC17F958D2ee523a2206206994597C13D831ec7);  //ERC20 - USDT Contract Address
    address constant USDT_ADDRESS = address(0x55d398326f99059fF775485246999027B3197955);    //BEP20 - USDT Contract Address
    uint256 public launchTime;
    uint256 public constant MAX_SUPPLY = 100000000 * 10 ** 18; // 100M tokens with 18 decimals
    uint256 public TAX_RATE = 5;                                    // 0.5% tax applied only on DEX trades
    uint256 public constant TOKENS_RELEASE = 30 days;
    uint256 public constant MONTHS_IN_4_YEARS = 48;
    uint256 public constant INITIAL_RELEASE_PERCENTAGE = 4;
    uint256 public constant VESTING_PERCENTAGE = 96;

    address[5] public fundAllocationAddressesArray;                 // Array to store fund allocation addresses
    uint256 public fundAllocationAddressCount = 0;                    // Counter for the number of fund allocation addresses
    bool public paused = false;                                     // State variable to track if sales are paused

    // Enum to define the type of sale
    enum SaleType { Seed, Private, Public }
    enum OtherAllocationType { VolatileControl, ExchangeListing, EcosystemDevelopment, Team, Reserve }
    // Struct to hold sale details
    struct Sale {
        uint256 tokensAvailable;
        uint256 initialAllocation;
        uint256 vestedTokens;
        uint256 monthlyRelease;
        uint256 sold;
        uint256 rate;
        bool isActive;
    }

    // Struct to hold rest of the token allocation details
    struct OtherAllocation {
        uint256 tokensAvailable;
        uint256 initialAllocation;
        uint256 vestedTokens;
        uint256 monthlyRelease;
    }
    
    mapping(SaleType => Sale) public sales;                                     // Mapping from SaleType to Sale
    mapping(OtherAllocationType => OtherAllocation) public distribution;        // Mapping from Other Allocation Type to Other Allocation
    mapping(uint => mapping(address => uint256)) public initialSaleBalances;
    mapping(uint => mapping(address => uint256)) public vestedSaleTokens;
    mapping(uint => mapping(address => uint256)) public totalVestedBalances;
    mapping(uint => mapping(address => uint256)) public totalSaleBalances;
    mapping(address => OtherAllocationType) public addressToAllocationType;     // Mapping to store the allocation type for each fund allocation address

    // Check contract balances of VolatileControl, ExchangeListing, EcosystemDevelopment, Team, Reserve
    mapping(address => uint256) public VolatileControlBalances;
    mapping(address => uint256) public ExchangeListingBalances;
    mapping(address => uint256)public EcosystemDevelopmentBalances;
    mapping(address => uint256) public TeamBalances;
    mapping(address => uint256) public ReserveBalances;
    mapping(address => uint256) public lastWithdrawal;
    mapping(address => bool) public isDex;                                      // Mapping to keep track of DEX addresses

    event TokensBought(address indexed buyer, uint256 amount);
    event TokensMinted(address indexed to, uint256 amount);
    event TokensBurned(address indexed from, uint256 amount, string reason);
    event TokensWithdrawn(address indexed from, uint256 amount);
    event TokenAllocated(address indexed sender, address indexed recipient, uint256 amount, OtherAllocationType allocationType);
    event TokenVested(address indexed beneficiary, uint256 amount, SaleType saleType, uint256 timestamp);
    event FundAllocationAddressSet(OtherAllocationType allocationType, address newAddress);
    event SaleRateUpdated(SaleType saleType, uint256 newRate);
    event SaleActivated(SaleType saleType, uint256 timestamp);
    event SalesPaused();
    event SalesResumed();

    constructor() ERC20("Secure Stash", "SST") {
        _mint(address(this), 100000000); // * 10 ** decimals());
        totalMint = totalSupply();
        launchTime = block.timestamp;

        // Initializing the seedSale, privateSale, and publicSale
        sales[SaleType.Seed] = Sale({
            tokensAvailable: totalSupply() * 25 / 1000,
            initialAllocation: 0,
            vestedTokens: 0,
            monthlyRelease: 0,
            sold: 0,
            rate: 0,
            isActive: false
        });

        sales[SaleType.Private] = Sale({
            tokensAvailable: totalSupply() * 175 / 1000,
            initialAllocation: 0,
            vestedTokens: 0,
            monthlyRelease: 0,
            sold: 0,
            rate: 0,
            isActive: false
        });

        sales[SaleType.Public] = Sale({
            tokensAvailable: totalSupply() * 100 / 1000,
            initialAllocation: 0,
            vestedTokens: 0,
            monthlyRelease: 0,
            sold: 0,
            rate: 0,
            isActive: false
        });
        
        // Initializing rest of the token allocation
        distribution[OtherAllocationType.VolatileControl] = OtherAllocation({
            tokensAvailable: totalSupply() * 500 / 1000,
            initialAllocation: (totalSupply() * 500 / 1000),
            vestedTokens: 0,
            monthlyRelease: 0
        });

        distribution[OtherAllocationType.ExchangeListing] = OtherAllocation({
            tokensAvailable: totalSupply() * 100 / 1000,
            initialAllocation: (totalSupply() * 100 / 1000 * INITIAL_RELEASE_PERCENTAGE) / 100,
            vestedTokens: (totalSupply() * 100 / 1000 * VESTING_PERCENTAGE) / 100,
            monthlyRelease: ((totalSupply() * 100 / 1000 * VESTING_PERCENTAGE) / 100) / MONTHS_IN_4_YEARS
        });

        distribution[OtherAllocationType.EcosystemDevelopment] = OtherAllocation({
            tokensAvailable: totalSupply() * 50 / 1000,
            initialAllocation: (totalSupply() * 50 / 1000 * INITIAL_RELEASE_PERCENTAGE) / 100,
            vestedTokens: (totalSupply() * 50 / 1000 * VESTING_PERCENTAGE) / 100,
            monthlyRelease: ((totalSupply() * 50 / 1000 * VESTING_PERCENTAGE) / 100) / MONTHS_IN_4_YEARS
        });

        distribution[OtherAllocationType.Team] = OtherAllocation({
            tokensAvailable: totalSupply() * 40 / 1000,
            initialAllocation: (totalSupply() * 40 / 1000 * INITIAL_RELEASE_PERCENTAGE) / 100,
            vestedTokens: (totalSupply() * 40 / 1000 * VESTING_PERCENTAGE) / 100,
            monthlyRelease: ((totalSupply() * 40 / 1000 * VESTING_PERCENTAGE) / 100) / MONTHS_IN_4_YEARS
        });

        distribution[OtherAllocationType.Reserve] = OtherAllocation({
            tokensAvailable: totalSupply() * 10 / 1000,
            initialAllocation: (totalSupply() * 10 / 1000 * INITIAL_RELEASE_PERCENTAGE) / 100,
            vestedTokens: (totalSupply() * 10 / 1000 * VESTING_PERCENTAGE) / 100,
            monthlyRelease: ((totalSupply() * 10 / 1000 * VESTING_PERCENTAGE) / 100) / MONTHS_IN_4_YEARS
        });
        totalVested = sales[SaleType.Seed].vestedTokens
            + sales[SaleType.Private].vestedTokens
            + sales[SaleType.Public].vestedTokens
            + distribution[OtherAllocationType.VolatileControl].vestedTokens
            + distribution[OtherAllocationType.ExchangeListing].vestedTokens
            + distribution[OtherAllocationType.EcosystemDevelopment].vestedTokens
            + distribution[OtherAllocationType.Team].vestedTokens
            + distribution[OtherAllocationType.Reserve].vestedTokens;
    
        circulatingSupply = totalMint - totalBurn - totalVested;
    }

    // Modifier to check if the sale is active
    modifier onlyWhenSaleActive(SaleType saleType) {
        require(sales[saleType].isActive, "Sale is not active");
        _;
    }

    // Modifier to check if sales are paused
    modifier whenNotPaused() {
        require(!paused, "Sales are paused");
        _;
    }

    function _updateCirculatingSupply() private {
        circulatingSupply = totalMint - totalBurn - totalVested;
    }

    // Function to activate a sale
    function activateSale(SaleType saleType, uint256 rate) public onlyOwner {
        Sale storage sale = sales[saleType];
        sale.rate = rate;
        sale.isActive = true;
        emit SaleActivated(saleType, block.timestamp);
    }

    // Function to pause sales
    function pauseSales() external onlyOwner {
        require(!paused, "Sales are already paused");
        paused = true;
        emit SalesPaused();
    }

    // Function to resume sales
    function resumeSales() external onlyOwner {
        require(paused, "Sales are not paused");
        paused = false;
        emit SalesResumed();
    }

    function setTaxRates(uint256 _taxRate) external onlyOwner {
        require(_taxRate <= 5, "Tax cannot exceed 0.5%");
        TAX_RATE = _taxRate;
    }

    // Function to add a DEX address
    function addDex(address _dex) public onlyOwner {
        isDex[_dex] = true;
    }
    
    // Function to remove a DEX address
    function removeDex(address _dex) public onlyOwner {
        isDex[_dex] = false;
    }

    function transfer(address recipient, uint256 amount) public override nonReentrant returns (bool) {
        require(balanceOf(msg.sender) >= amount, "Insufficient balance");
        uint256 tax = 0;
        if (isDex[recipient] || isDex[msg.sender]) {
            tax = (amount * TAX_RATE) / 1000;                // Calculate tax
        }
        uint256 netValue = amount - tax;                    // Calculate net value to be transferred

        // Send tax to dead wallet and reduce total supply
        if (tax > 0) {
            super.transfer(deadWallet, tax);
            _burn(deadWallet, tax);                         // Burn the tokens sent to the dead wallet
            totalBurn = totalBurn + tax;                    // Update total tokens burnt
            emit TokensBurned(msg.sender, tax, "Tax Burn");
            _updateCirculatingSupply();                     //Update Circulating Supply
        }
        return super.transfer(recipient, netValue);         // Call the original transfer function
    }
    
    function mint(uint256 amount) public onlyOwner {
        require((totalSupply() + amount) <= MAX_SUPPLY, "Cannot exceed Maximum supply");
        _mint (address(this), amount);
        EcosystemDevelopmentBalances[address(this)] += amount; //Minted tokens gets allocated to ecosytem development
        totalMint += amount;
        _updateCirculatingSupply();
        emit TokensMinted(address(this), amount);
    }

    function burn(uint256 amount) public {
        _burn(msg.sender, amount);
        totalBurn += amount;
        _updateCirculatingSupply();
        emit TokensBurned(msg.sender, amount, "Manual Burn");
    }

    function buySale(SaleType saleType, uint256 amount) public payable onlyWhenSaleActive(saleType) nonReentrant {
        Sale storage sale = sales[saleType];                                // Access the sale from the mapping based on SaleType
        uint256 cost = amount * sales[saleType].rate;
    
        require(IERC20(USDT_ADDRESS).allowance(msg.sender, address(this)) >= cost, "Approve USDT first");  // Ensure the sender has approved the contract to spend the required amount of USDT
        require(IERC20(USDT_ADDRESS).transferFrom(msg.sender, owner(), cost), "USDT transfer failed");
        require(amount <= sale.tokensAvailable, "Not enough tokens available for sale");
        
        sale.initialAllocation = (amount * 4) / 100;                        // Initial sale tokens sent
        sale.vestedTokens += (amount - sale.initialAllocation);             // Sale Tokens sent for vesting
        totalVested += sale.vestedTokens;                                   // Update the total tokens vested
        sale.sold += amount;                                                // Update the total sold amount
        sale.tokensAvailable -= amount;                                     // Update available sale total balances
        initialSaleBalances[uint(saleType)][msg.sender] += sale.initialAllocation; // Update buyer's initial sale balances
        vestedSaleTokens[uint(saleType)][msg.sender] += sale.vestedTokens;  // Update buyer's vested sale balances
        totalSaleBalances[uint(saleType)][msg.sender] += amount;            // Update buyer's total sale balances
        totalSaleBalances[uint(saleType)][address(this)] -= amount;         // Update available sale balances in contract
        sale.monthlyRelease += ((totalSaleBalances[uint(saleType)][msg.sender] - initialSaleBalances[uint(saleType)][msg.sender]) / MONTHS_IN_4_YEARS);
        _updateCirculatingSupply();
        _transfer(address(this), msg.sender, sale.initialAllocation);                   // Transfer the initial allocation to the buyer
        emit TokensBought(msg.sender, amount);                              // Emit the TokensBought event
        }
    
    function withdrawSaleVestedTokens() public nonReentrant {
        uint256 totalAmount = 0;

        // Calculate the number of periods since the contract launch time
        uint256 periodsSinceLaunch = (block.timestamp - launchTime) / TOKENS_RELEASE;

        // Iterate over each sale type
        for (uint i = 0; i < 3; i++) {
            SaleType saleType = SaleType(i);
            Sale storage sale = sales[saleType];

        // Skip the sale if it's not active or no vested tokens
        if (sale.vestedTokens == 0) continue;
            
            // Calculate the number of periods since the last withdrawal
            uint256 periodsSinceLastWithdrawal = (block.timestamp - lastWithdrawal[msg.sender]) / TOKENS_RELEASE;

            // Ensure the user waits for at least one period before the next withdrawal
            require(periodsSinceLastWithdrawal > 0, "Not yet time to release next batch of tokens");
            require(vestedSaleTokens[uint(saleType)][msg.sender] > 0, "No tokens available in vesting");    
    
            uint256 totalAmountToBeReleased = sale.monthlyRelease * periodsSinceLaunch;
            uint256 amountAlreadyWithdrawn = totalAmountToBeReleased - sale.vestedTokens;
            uint256 amount = totalAmountToBeReleased - amountAlreadyWithdrawn;

            require(amount <= sale.vestedTokens, "Not enough vested tokens available");
            sale.vestedTokens -= amount;                                // Update the remaining balances of sale tokens post vesting release
            vestedSaleTokens[uint(saleType)][msg.sender] -= amount;     // Update the remaining balances of user's sale tokens post vesting release
            totalVestedBalances[uint(saleType)][address(this)] -= amount; // Update the remaining balances in contract for sale tokens post vesting release
            totalVested -= amount;
            _updateCirculatingSupply();
            totalAmount += amount;                                      // Uptdate total tokens (all 3 sale) to be released from vesting
        }

        require(totalAmount > 0, "No tokens to withdraw");
        _transfer(address(this), msg.sender, totalAmount); // Transfer the total tokens from the contract to the user
        lastWithdrawal[msg.sender] = block.timestamp;
        emit TokensWithdrawn(msg.sender, totalAmount);
    }

    function withdrawOtherVestedTokens() public onlyOwner nonReentrant {
        uint256 totalAmount = 0;

        // Calculate the number of periods since the contract launch time
        uint256 periodsSinceLaunch = (block.timestamp - launchTime) / TOKENS_RELEASE;

        // Iterate over each allocation type
        for (uint i = 0; i < 5; i++) {
            OtherAllocationType otherAllocationType = OtherAllocationType(i);
            OtherAllocation storage otherAllocation = distribution[otherAllocationType];

        // Skip the allocation if no vested tokens
        if (otherAllocation.vestedTokens == 0) continue;
            
            // Calculate the number of periods since the last withdrawal
            uint256 periodsSinceLastWithdrawal = (block.timestamp - lastWithdrawal[address(this)]) / TOKENS_RELEASE;

            // Ensure the user waits for at least one period before the next withdrawal
            require(periodsSinceLastWithdrawal > 0, "Not yet time to release next batch of tokens");
            uint256 totalAmountToBeReleased = otherAllocation.monthlyRelease * periodsSinceLaunch;
            uint256 amountAlreadyWithdrawn = totalAmountToBeReleased - otherAllocation.vestedTokens;
            uint256 amount = totalAmountToBeReleased - amountAlreadyWithdrawn;
            require(amount <= otherAllocation.vestedTokens, "Not enough vested tokens available");

                // Update specific mappings based on the allocation type
                if (otherAllocationType == OtherAllocationType.VolatileControl) {
                    VolatileControlBalances[address(this)] += amount;
                } else if (otherAllocationType == OtherAllocationType.ExchangeListing) {
                    ExchangeListingBalances[address(this)] += amount;
                } else if (otherAllocationType == OtherAllocationType.EcosystemDevelopment) {
                    EcosystemDevelopmentBalances[address(this)] += amount;
                } else if (otherAllocationType == OtherAllocationType.Team) {
                    TeamBalances[address(this)] += amount;
                } else if (otherAllocationType == OtherAllocationType.Reserve) {
                    ReserveBalances[address(this)] += amount;
                }

            otherAllocation.vestedTokens -= amount;                                         // Update other allocation tokens in vesting
            totalVested -= amount;                                                          // Update balances of total tokens in vesting
            _updateCirculatingSupply();
            totalAmount += amount;
        }

        require(totalAmount > 0, "No tokens to withdraw");
        _transfer(address(this), msg.sender, totalAmount);                     // Transfer the total tokens from the contract to the user
        lastWithdrawal[address(this)] = block.timestamp;
        emit TokensWithdrawn(address(this), totalAmount);
    }

    function setFundAllocationAddress(OtherAllocationType allocationType, address _address) public onlyOwner {
        require(fundAllocationAddressCount < 5, "Maximum of 5 fund allocation addresses reached");  // Ensure no more than 5 addresses
        require(addressToAllocationType[_address] == OtherAllocationType(0), "Address already set for an allocation type");  // Ensure address isn't already set

        fundAllocationAddressesArray[fundAllocationAddressCount] = _address;   // Add address to the array
        addressToAllocationType[_address] = allocationType;                    // Map the address to its allocation type
        fundAllocationAddressCount++;                                          // Increment the counter
    }

    function sendToFundAllocationAddress(OtherAllocationType allocationType) public onlyOwner nonReentrant {
        address recipient = address(0);                                        // Initialize recipient address
        for (uint8 i = 0; i < fundAllocationAddressCount; i++) {               // Loop through fund allocation addresses
            if (addressToAllocationType[fundAllocationAddressesArray[i]] == allocationType) {  // Find the address for the given allocation type
                recipient = fundAllocationAddressesArray[i];
                break;
            }
        }
        require(recipient != address(0), "No fund allocation address set for this allocation type");  // Ensure a recipient was found

        uint256 amountToSend;

        if (allocationType == OtherAllocationType.VolatileControl) {
            amountToSend = VolatileControlBalances[address(this)];
            VolatileControlBalances[address(this)] = 0;
        } else if (allocationType == OtherAllocationType.ExchangeListing) {
            amountToSend = ExchangeListingBalances[address(this)];
            ExchangeListingBalances[address(this)] = 0;
        } else if (allocationType == OtherAllocationType.EcosystemDevelopment) {
            amountToSend = EcosystemDevelopmentBalances[address(this)];
            EcosystemDevelopmentBalances[address(this)] = 0;
        } else if (allocationType == OtherAllocationType.Team) {
            amountToSend = TeamBalances[address(this)];
            TeamBalances[address(this)] = 0;
        } else if (allocationType == OtherAllocationType.Reserve) {
            amountToSend = ReserveBalances[address(this)];
            ReserveBalances[address(this)] = 0;
        }

        require(amountToSend > 0, "No funds available to send");               // Ensure there are funds to send
        _transfer(address(this), recipient, amountToSend);                     // Transfer the funds
    }

    function viewPendingVestedTokens(address user) public view returns (uint256) {
        uint256 totalPending = 0;  // Initialize the total pending tokens to 0
        uint256 periodsSinceLaunch = (block.timestamp - launchTime) / TOKENS_RELEASE;

        // Calculate the vested tokens for each sale (Seed, Private, Public)
        for (uint i = 0; i < 3; i++) {
            SaleType saleType = SaleType(i);
            Sale storage sale = sales[saleType];

            //Skip to the next iteration, if there are no vested tokens for this sale type
            if (sale.vestedTokens == 0) continue;
            
            // Calculate the number of periods since the user's last withdrawal.
            uint256 periodsSinceLastWithdrawal = (block.timestamp - lastWithdrawal[user]) / TOKENS_RELEASE;

            // Skip to the next iteration, if no period has passed since the user's last withdrawal.
            if (periodsSinceLastWithdrawal == 0) continue;
            uint256 totalAmountToBeReleased = sale.monthlyRelease * periodsSinceLaunch;
            uint256 amountAlreadyWithdrawn = totalAmountToBeReleased - sale.vestedTokens;
            uint256 amount = totalAmountToBeReleased - amountAlreadyWithdrawn;

            // If the calculated amount exceeds the vested tokens for this sale type, set the amount to the vested tokens.
            if (amount > sale.vestedTokens) {
                amount = sale.vestedTokens;
            }
            totalPending += amount;
        }
        return totalPending;
    }

    function getCirculatingSupply() public view returns (uint256) {
        return circulatingSupply;
    }
    
    function getTotalSupply() public view returns (uint256) {
        return totalSupply();
    }
    
    function getTotalBurns() public view returns (uint256) {
        return totalBurn;
    }
    
    function getTotalVesting() public view returns (uint256) {
        return totalVested;
    }

}
